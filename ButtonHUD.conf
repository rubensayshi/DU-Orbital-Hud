name: ButtonsHud - Dimencia and Archaegeo v4.70 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        freeLookToggle = true --export: Set to false for default free look behavior.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), use 6944.4444 for 25000km/hr
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        AutopilotInterplanetaryThrottle = 100 --export: How much throttle, in percent, you want it to use when autopiloting to another planet
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        centerX = 700 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        centerY = 980 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.70;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;markers={}MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;brakeToggle=BrakeToggleDefault;brakeToggle=true;displayOrbit=true;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;rollInput=0;yawInput=0;brakeInput=0;pitchInput2=0;rollInput2=0;yawInput2=0;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;Reentry=false;Autopilot=false;FollowMode=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotRealigned=false;VectorToTarget=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"simulatedX=0;simulatedY=0;HoldingCtrl=false;PrevViewLock=1;PreviousYawAmount=0;PreviousPitchAmount=0;msgText="empty"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;isBoosting=false;distance=0;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasGear=false;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;damageMessage=""radarMessage=""LastOdometerOutput=""peris=0;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;AutopilotPlanetGravity=0;UnitHidden=true;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;AntigravTargetAltitude=nil;lastTravelTime=system.getTime()core_altitude=core.getAltitude()elementsID=core.getElementIdList()atmoTanks={}spaceTanks={}rocketTanks={}eleTotalMaxHp=0;flightTime=0;totalFlightTime=0;RepairArrows=false;wipedDatabank=false;fuelTimeLeftR={}fuelPercentR={}FuelUpdateDelay=a(1/apTickRate)*2;fuelTimeLeftS={}fuelPercentS={}fuelTimeLeft={}fuelPercent={}SavedLocations={}LocationIndex=0;updateTanks=false;honeyCombMass=0;upAmount=0;local m={}local n=1;local o=0.001;local p=2560;local q=1440;local r=nil;local s=nil;local t=nil;local u=nil;local v=false;local w=false;local x=0;local y=nil;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","useTheseSettings","centerX","centerY"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","AutoBrake","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}if dbHud then local z=dbHud.hasKey;if not useTheseSettings then for A,B in pairs(SaveableVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C;v=true end end end end;for A,B in pairs(AutoVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C;v=true end end end;if v then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then msgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off newSettings to use saved values"useTheseSettings=false else msgText="No Saved Variables Found - Stand up / leave remote to save settings"end else msgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;autoRoll=autoRollPreference;lastConstructMass=k()honeyCombMass=lastConstructMass-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]UpdateCount=0;titlecolR=rgb;titlecol=rgb;titlecolS=rgb;coroutine.yield()for A in pairs(elementsID)do local D=h(elementsID[A])if D=="landing gear"then hasGear=true end;if D=="dynamic core"then local E=e(elementsID[A])coreOffset=16;if E>10000 then coreOffset=128 elseif E>1000 then coreOffset=64 elseif E>150 then coreOffset=32 end end;eleTotalMaxHp=eleTotalMaxHp+e(elementsID[A])if D=="atmospheric fuel-tank"or D=="space fuel-tank"or D=="rocket fuel-tank"then local E=e(elementsID[A])local F=j(elementsID[A])local G=0;local H=system.getTime()if D=="atmospheric fuel-tank"then local I=400;local J=35.03;if E>10000 then I=51200;J=5480 elseif E>1300 then I=6400;J=988.67 elseif E>150 then I=1600;J=182.67 end;G=F-J;if fuelTankOptimizationAtmo>0 then I=I+I*fuelTankOptimizationAtmo*0.2 end;if G>I then I=G end;atmoTanks[#atmoTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="rocket fuel-tank"then local I=320;local J=173.42;if E>65000 then I=40000;J=25740 elseif E>6000 then I=5120;J=4720 elseif E>700 then I=640;J=886.72 end;G=F-J;if fuelTankOptimizationRocket>0 then I=I+I*fuelTankOptimizationRocket*0.1 end;if G>I then I=G end;rocketTanks[#rocketTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="space fuel-tank"then local I=2400;local J=182.67;if E>10000 then I=76800;J=5480 elseif E>1300 then I=9600;J=988.67 end;G=F-J;if fuelTankOptimizationSpace>0 then I=I+I*fuelTankOptimizationSpace*0.2 end;if G>I then I=G end;spaceTanks[#spaceTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;if door then for _,B in pairs(door)do B.deactivate()end end;if forcefield then for _,B in pairs(forcefield)do B.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;unit.hide()function refreshLastMaxBrake(K,L)if K==nil then K=core.g()end;K=round(K,5)if L~=nil and L or(y==nil or y~=K)then local M=c(unit.getData()).maxBrake;if M~=nil then LastMaxBrake=M end;y=K end end;function MakeButton(N,O,P,Q,R,S,T,U,V)local W={enableName=N,disableName=O,width=P,height=Q,x=R,y=S,toggleVar=T,toggleFunction=U,drawCondition=V,hovered=false}table.insert(m,W)return W end;function AddLocationsToAtlas()for A,B in pairs(SavedLocations)do table.insert(atlas[0],B)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local D=#SavedLocations..". "..planet.name;if radar_1 then local X,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then D=D.." "..radar_1.getConstructName(X)end end;local Y={position=position,name=D,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=Y;table.insert(atlas[0],Y)msgText="Location saved as "..D else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local Z=-1;for A,B in pairs(atlas[0])do if B.name and B.name==CustomTarget.name then Z=A end end;if Z>-1 then table.remove(atlas[0],Z)end;Z=-1;for A,B in pairs(SavedLocations)do if B.name and B.name==CustomTarget.name then msgText=B.name.." saved location cleared"Z=A;break end end;if Z~=-1 then table.remove(SavedLocations,Z)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(newContent)newContent[#newContent+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if UnitHidden then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;UnitHidden=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;UnitHidden=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(a0,a1,R,S,P,Q)if a0>R and a0<R+P and a1>S and a1<S+Q then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then AutoBrake=false;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function toggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function AutopilotToggle()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ToggleAutoBrake()if AutopilotTargetPlanetName~="None"and brakeInput==0 and not AutoBrake then AutoBrake=true;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false else AutoBrake=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;local a2="Off"if ProgradeIsOn then a2="On"end end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;local a3="Off"if RetrogradeIsOn then a3="On"end end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(newContent)local a4=0;damageMessage=""currentConstructMass=k()local a5=eleTotalMaxHp;local a6=0;local a7=100;local a8=0;local a9=0;local aa=0;local ab=""for A in pairs(elementsID)do local E=0;local ac=0;ac=e(elementsID[A])E=g(elementsID[A])a6=a6+E;if E<ac then if E==0 then a9=a9+1 else a8=a8+1 end;if RepairArrows and#markers==0 then position=vec3(core.getElementPositionById(elementsID[A]))local coreOffset=16;local R=position.x-coreOffset;local S=position.y-coreOffset;local ad=position.z-coreOffset;table.insert(markers,core.spawnArrowSticker(R,S,ad+1,"down"))table.insert(markers,core.spawnArrowSticker(R,S,ad+1,"down"))core.rotateSticker(markers[2],0,0,90)table.insert(markers,core.spawnArrowSticker(R+1,S,ad,"north"))table.insert(markers,core.spawnArrowSticker(R+1,S,ad,"north"))core.rotateSticker(markers[4],90,90,0)table.insert(markers,core.spawnArrowSticker(R-1,S,ad,"south"))table.insert(markers,core.spawnArrowSticker(R-1,S,ad,"south"))core.rotateSticker(markers[6],90,-90,0)table.insert(markers,core.spawnArrowSticker(R,S-1,ad,"east"))table.insert(markers,core.spawnArrowSticker(R,S-1,ad,"east"))core.rotateSticker(markers[8],90,0,90)table.insert(markers,core.spawnArrowSticker(R,S+1,ad,"west"))table.insert(markers,core.spawnArrowSticker(R,S+1,ad,"west"))core.rotateSticker(markers[10],-90,0,90)table.insert(markers,elementsID[A])end elseif RepairArrows and#markers>0 and markers[11]==elementsID[A]then for ae in pairs(markers)do core.deleteSticker(markers[ae])end;markers={}end end;a4=a(a6*100/a5)if currentConstructMass<lastConstructMass then a7=math.ceil(100*(currentConstructMass-updateMass())/honeyCombMass)lastConstructMass=currentConstructMass end;if a7<100 or a4<100 then newContent[#newContent+1]=[[<g class="pbright txt">]]if a7<100 then aa=a(a7*2.55)ab=b("rgb(%d,%d,%d)",255-aa,aa,0)newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],ab,a7)end;aa=a(a4*2.55)ab=b("rgb(%d,%d,%d)",255-aa,aa,0)if a4<100 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ab,a4)if a9>0 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ab,a9,a8)elseif a8>0 then newContent[#newContent+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ab,a8)end end;newContent[#newContent+1]=[[<\g>]]end end;function DrawCursorLine(newContent)local af=a(utils.clamp(distance/(p/4)*255,0,255))newContent[#newContent+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+af,a(PrimaryG+0.5)-af,a(PrimaryB+0.5)-af)end;function getPitch(ag,ah,ai)local aj=ag:cross(ai):normalize_inplace()local ak=math.acos(utils.clamp(aj:dot(-ah),-1,1))*constants.rad2deg;if aj:cross(-ah):dot(ai)<0 then ak=-ak end;return ak end;function wipeSaveVariables()if not dbHud then msgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif v then if w then for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,d(nil))end;for A,B in pairs(AutoVariables)do dbHud.setStringValue(B,d(nil))end;msgText="Databank wiped. New variables will save after re-enter seat and exit"msgTimer=5;w=false;v=false;wipedDatabank=true else msgText="Press ALT-7 again to confirm wipe"w=true end end end;function CheckButtons()for _,B in pairs(m)do if B.hovered then B.toggleFunction()B.hovered=false end end end;function SetButtonContains()local R=simulatedX+p/2,simulatedY+q/2;local S=simulatedY+q/2;for _,B in pairs(m)do B.hovered=Contains(R,S,B.x,B.y,B.width,B.height)end end;function DrawButton(newContent,al,hover,R,S,am,an,ao,ap,aq,ar)if type(aq)=="function"then aq=aq()end;if type(ar)=="function"then ar=ar()end;newContent[#newContent+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",R,S,am,an)if al then newContent[#newContent+1]=b("%s'",ao)else newContent[#newContent+1]=ap end;if hover then newContent[#newContent+1]=" style='stroke:white; stroke-width:2'"else newContent[#newContent+1]=" style='stroke:black; stroke-width:1'"end;newContent[#newContent+1]="></rect>"newContent[#newContent+1]=b("<text x='%f' y='%f' font-size='24' fill='",R+am/2,S+an/2+5)if al then newContent[#newContent+1]="black"else newContent[#newContent+1]="white"end;newContent[#newContent+1]="' text-anchor='middle' font-family='Montserrat'>"if al then newContent[#newContent+1]=b("%s</text>",aq)else newContent[#newContent+1]=b("%s</text>",ar)end end;function DrawButtons(newContent)local as="rgb(50,50,50)'"local at="rgb(210,200,200)"local au=DrawButton;for _,B in pairs(m)do local O=B.disableName;local N=B.enableName;if type(O)=="function"then O=O()end;if type(N)=="function"then N=N()end;if not B.drawCondition or B.drawCondition()then au(newContent,B.toggleVar(),B.hovered,B.x,B.y,B.width,B.height,at,as,O,N)end end end;function DrawTank(newContent,updateTanks,R,av,aw,ax,ay,az)local aA=1;local aB=2;local aC=3;local aD=4;local aE=5;local aF=6;local aG=""local aH=0;local aI=350;local aJ=360;if l()==1 then aI=aI-50;aJ=aJ-50 end;newContent[#newContent+1]=[[<g class="pdim txtfuel">]]if aw=="ATMO"then aG="atmofueltank"elseif aw=="SPACE"then aG="spacefueltank"else aG="rocketfueltank"end;aH=_G[aG.."_size"]if#ax>0 then for i=1,#ax do local D=string.sub(ax[i][aB],1,12)local aK=0;for ae=1,aH do if ax[i][aB]==json.decode(unit[aG.."_"..ae].getData()).name then aK=ae;break end end;if updateTanks or ay[i]==nil or az[i]==nil then local aL=0;local aM=0;local aN=0;local aO=0;local H=system.getTime()if aK~=0 then az[i]=json.decode(unit[aG.."_"..aK].getData()).percentage;ay[i]=json.decode(unit[aG.."_"..aK].getData()).timeLeft;if ay[i]=="n/a"then ay[i]=0 end else aN=j(ax[i][aA])-ax[i][aD]aL=ax[i][aC]az[i]=a(0.5+aN*100/aL)aM=ax[i][aE]aO=ax[i][aF]if aM<=aN then ay[i]=0 else ay[i]=a(0.5+aN/((aM-aN)/(H-aO)))end;ax[i][aE]=aN;ax[i][aF]=H end end;if D==av then D=b("%s %d",aw,i)end;if aK==0 then D=D.." *"end;local aP;if ay[i]==0 then aP="n/a"else aP=FormatTimeString(ay[i])end;if az[i]~=nil then local aa=a(az[i]*2.55)local ab=b("rgb(%d,%d,%d)",255-aa,aa,0)local aQ=""if aP~="n/a"and ay[i]<120 or az[i]<5 then if updateTanks then aQ=[[class="red"]]end end;newContent[#newContent+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],R,aI,aQ,D,R,aJ,ab,az[i],aP)aI=aI+30;aJ=aJ+30 end end end;newContent[#newContent+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local ak=-math.deg(math.atan(velocity.y,velocity.z))+180;ak=ak-90;if ak<0 then ak=360+ak end;if ak>180 then ak=-180+ak-180 end;return-ak end;function getRelativeYaw(velocity)velocity=vec3(velocity)local aR=math.deg(math.atan(velocity.y,velocity.x))-90;if aR<-180 then aR=360+aR end;return aR end;function AlignToWorldVector(aS,aT)if aT==nil then aT=o end;aS=vec3(aS):normalize()local aU=vec3(core.getConstructWorldOrientationForward())-aS;local aV=-getMagnitudeInDirection(aU,core.getConstructWorldOrientationRight())*n;local aW=-getMagnitudeInDirection(aU,core.getConstructWorldOrientationUp())*n;yawInput2=yawInput2-(aV+(aV-PreviousYawAmount)*DampingMultiplier)pitchInput2=pitchInput2+aW+(aW-PreviousPitchAmount)*DampingMultiplier;PreviousYawAmount=aV;PreviousPitchAmount=aW;if math.abs(aV)<aT and math.abs(aW)<aT then return true end;return false end;function getAPEnableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if D==nil then D="None"end;return"Engage Autopilot: "..D end;function getAPDisableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name end;if D==nil then D="None"end;return"Disable Autopilot: "..D end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=core_altitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local aX=50;local aY=260;local aZ=MakeButton("Enable Brake Toggle","Disable Brake Toggle",aY,aX,p/2-aY/2,q/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",aY,aX,p/2-aY/2-50-aZ.width,q/2-aX+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",aY,aX,p/2-aY/2+aZ.width+50,q/2-aX+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local a_=MakeButton(getAPEnableName,getAPDisableName,600,60,p/2-600/2,q/2-60/2-400,function()return Autopilot end,AutopilotToggle)MakeButton("Save Position","Save Position",200,a_.height,a_.x+a_.width+30,a_.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,a_.height,a_.x-200-30,a_.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)aX=60;aY=300;local R=10;local S=q/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",aY,aX,R,S,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",aY,aX,R+aY+20,S,function()return AltitudeHold end,ToggleAltitudeHold)S=S+aX+20;MakeButton("Engage Autoland","Disable Autoland",aY,aX,R,S,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",aY,aX,R+aY+20,S,function()return AutoTakeoff end,ToggleAutoTakeoff)S=S+aX+20;MakeButton("Engage Follow Mode","Disable Follow Mode",aY,aX,R,S,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Engage Glide Reentry","Disable Glide Reentry",aY,aX,R+aY+20,S,function()return ReentryMode end,function()ReentryMode=not ReentryMode;if ReentryMode then msgText="Reentry Mode Enabled. Press G when aligned with planet for reentry"else msgText="Reentry Mode Disabled.  Normal Landing with G"end end)S=S+aX+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",aY,aX,R,S,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",aY,aX,R+aY+20,S,function()return displayOrbit end,function()displayOrbit=not displayOrbit;if displayOrbit then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)S=S+aX+20;MakeButton("Enable AGG","Disable AGG",aY,aX,R,S,function()return AntigravTargetAltitude==nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",aY,aX,R,S,function()return RepairArrows end,function()RepairArrows=not RepairArrows;if RepairArrows then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)S=S+aX+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,aY*2,aX,R,S,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(newContent)local b0=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local b1=vec3(core.getWorldVertical())local b2=vec3(core.getConstructWorldOrientationForward())local b3=vec3(core.getConstructWorldOrientationRight())local b4=vec3(core.getConstructWorldOrientationUp())local ak=getPitch(b1,b2,b3)local b5=getRoll(b1,b2,b3)local b6=b5;local b7=ak;local b8="ROLL"local b9=core.getWorldGravity()local K=vec3(b9):len()local ba=f()local bb=a(unit.getThrottle())local bc=speed*3.6;local bd=unit.getAxisCommandValue(0)local be=GetFlightStyle()if ba==0 then if speed>5 then ak=getRelativePitch(velocity)b5=getRelativeYaw(velocity)else ak=0;b5=0 end;b8="YAW"end;newContent[#newContent+1]=LastOdometerOutput;newContent[#newContent+1]=damageMessage;newContent[#newContent+1]=radarMessage;if UpdateCount%FuelUpdateDelay==0 then updateTanks=true end;DrawTank(newContent,updateTanks,100,"Atmospheric ","ATMO",atmoTanks,fuelTimeLeft,fuelPercent)DrawTank(newContent,updateTanks,200,"Space fuel t","SPACE",spaceTanks,fuelTimeLeftS,fuelPercentS)DrawTank(newContent,updateTanks,300,"Rocket fuel ","ROCKET",rocketTanks,fuelTimeLeftR,fuelPercentR)if updateTanks then updateTanks=false;UpdateCount=0 end;UpdateCount=UpdateCount+1;DrawVerticalSpeed(newContent,b0,ba)if l()==0 then if unit.getClosestPlanetInfluence()>0 then if not IsInFreeLook()then DrawArtificialHorizon(newContent,b7,b6,ba,centerX,centerY,"ROLL")DrawPrograde(newContent,b7,b6,ba,velocity,speed,centerX,centerY)end else if not IsInFreeLook()then DrawArtificialHorizon(newContent,ak,b5,ba,centerX,centerY,"YAW")DrawPrograde(newContent,b7,b6,ba,velocity,speed,centerX,centerY)end end;DrawAltitudeDisplay(newContent,b0,ba)end;DrawThrottle(newContent,be,bb,bd)DrawSpeed(newContent,bc)DrawWarnings(newContent)DisplayOrbit(newContent)if screen_2 then local bf=vec3(core.getConstructWorldPos())local R=960+bf.x/MapXRatio;local S=450+bf.y/MapYRatio;screen_2.moveContent(YouAreHere,(R-80)/19.2,(S-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(newContent)local bg=rgb;local bh=rgbdim;local bi=rgb;local bj=rgbdim;if IsInFreeLook()and not brightHud then bg=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bh=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;newContent[#newContent+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bg,bg,bi,bi,bh,bh,bj,bj)end;function HUDEpilogue(newContent)newContent[#newContent+1]="</svg>"end;function DrawSpeed(newContent,bc)local bk=550;local bl=560;newContent[#newContent+1]=[[<g class="pdim txt txtend">]]if l()==1 then bk=60;bl=75 end;newContent[#newContent+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="718" y="%d">%d km/h</text>
                        </g>
                    </g>]],bl,a(bc))end;function DrawOdometer(newContent,totalDistanceTrip,totalDistanceTravelled,be,flightTime)local bm=1240;local bn=55;local bo=65;local ba=f()local K=core.g()local bp=0;local bq=0;refreshLastMaxBrake(K)maxThrust=Nav:maxForceForward()x=k()local br=vec3(core.getWorldAcceleration()):len()/9.80665;if K>0.1 then bq=x*K;maxMass=maxThrust/K end;newContent[#newContent+1]=[[<g class="pdim txt txtend">]]if l()==1 then bm=1120;bn=55;bo=65 elseif ba>0 then newContent[#newContent+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],ba)end;newContent[#newContent+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bm,bn,bm,bo,K/9.80665,bm,bn+20,bm,bo+20,br)newContent[#newContent+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then newContent[#newContent+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),x/1000,LastMaxBrake/1000,maxThrust/1000,be)if K>0.1 then newContent[#newContent+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],maxMass/1000,bq/1000)else newContent[#newContent+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else newContent[#newContent+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],be)end;newContent[#newContent+1]="</g>"end;function DrawThrottle(newContent,be,bb,bd)local aI=centerY+65;local aJ=centerY+75;if l()==1 then aI=55;aJ=65 end;local bs="CRUISE"local unit="km/h"local bt=bd;if be=="TRAVEL"or be=="AUTOPILOT"then bs="THROT"unit="%"bt=bb;local bu="dim"if bb<0 then bu="red"end;newContent[#newContent+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bu,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bb),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;newContent[#newContent+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,aI,bs,centerX-150,aJ,bt,unit)end;function DrawVerticalSpeed(newContent,b0,ba)if b0<200000 and ba==0 or b0 and ba>0 then local velocity=vec3(core.getWorldVelocity())local bv=vec3(core.getWorldVertical())*-1;local bw=velocity.x*bv.x+velocity.y*bv.y+velocity.z*bv.z;local bx=0;if math.abs(bw)>1 then bx=45*math.log(math.abs(bw),10)if bw<0 then bx=-bx end end;newContent[#newContent+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(1525 250) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],a(bw),a(bx))end end;function DrawArtificialHorizon(newContent,b7,b6,ba,centerX,centerY,b8)local by=circleRad;if by>0 then local bz=a(b7)local bA=0;local bB=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*b6,centerX,centerY)newContent[#newContent+1]=[[<g class="dim txttick">]]for i=a(bz-15-bz%5+0.5),a(bz+15+bz%5+0.5),5 do if i%10==0 then bA=30 elseif i%5==0 then bA=20 end;local S=centerY+-i*5+b7*5;if bA==30 then bB=b([[%s M %d %f h %d]],bB,centerX-15,S,bA)else bB=b([[%s M %d %f h %d]],bB,centerX-10,S,bA)end end;newContent[#newContent+1]="</g>"newContent[#newContent+1]=bB;local bC="PITCH"if b8=="YAW"then bC="REL PITCH"end;newContent[#newContent+1]=b([["/>
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                        ]],centerX,centerY-circleRad-20,bC,centerX,centerY-circleRad-10,bz)if b7>90 and ba==0 then b7=90-(b7-90)elseif b7<-90 and ba==0 then b7=-90-(b7+90)end;newContent[#newContent+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)newContent[#newContent+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                <clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" clip-path="url(#cut)" transform="rotate(%f %d %d)"/>]],by,centerX,centerY,by-1,centerX,centerY,centerX-by,centerY+by*b7/90,by*2,by*2,-1*b6,centerX,centerY)end end;function DrawAltitudeDisplay(newContent,b0,ba)if b0<200000 and ba==0 or b0 and ba>0 then local bD=718;local bE=520;local bF=67;local bG=21;table.insert(newContent,b([[
                            <g class="pdim txtbig">
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/>        
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bD,bE,bF,bG,bD+2,bE+2,bF-4,bG-4))local bH=10;local bI=15;local Z=0;local bJ=1;local bK=0;while Z<6 do local bL=b0/bJ%10;local bM=a(bL)local bN=a((bM+1)%10)local bO=bK;if Z==0 then bO=bL-bM end;local bP=bI*(bO-1)local bQ=bP+bI;local R=bD+3+(6-Z)*bH;local S=bE+15;table.insert(newContent,b([[
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                            ]],R,S+bP,bN,R,S+bQ,bM))Z=Z+1;bJ=bJ*10;if bM==9 then bK=bO else bK=0 end end;table.insert(newContent,[[</g></g>]])end end;function DrawPrograde(newContent,b7,b6,ba,velocity,speed,centerX,centerY)if ba==0 and speed>5 then local by=circleRad;local bR=20;local bS=20;local bT=getRelativePitch(velocity)local bU=getRelativeYaw(velocity)local bV=-bU/bS*by;local bW=bT/bR*by;local R=centerX+bV;local S=centerY+bW;local distance=math.sqrt(bV^2+bW^2)if distance<by then newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',R,S)else local bx=math.atan(bW,bV)local bX=centerX+by*math.cos(bx)local bY=centerY+by*math.sin(bx)newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',bX,bY)end end end;function DrawWarnings(newContent)newContent[#newContent+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)newContent[#newContent+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then newContent[#newContent+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]newContent[#newContent+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]newContent[#newContent+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local bZ=960;local b_=860;local c0=900;local c1=930;local c2=225;local c3=150;local c4=960;if l()==1 then b_=135;c0=155;c1=175;c2=115;c3=95 end;if BrakeIsOn then newContent[#newContent+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],bZ,b_)end;if GyroIsOn then newContent[#newContent+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],bZ,c4)end;if gearExtended then if hasGear then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],bZ,c0)else newContent[#newContent+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],bZ,c0)end;newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],bZ,c1,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],bZ,c2,getDistanceDisplayString2(AntigravTargetAltitude))elseif AutoBrake and AutopilotTargetPlanetName~="None"then if brakeInput==0 then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Auto-Braking when within %s of %s</text>]],bZ,c2,getDistanceDisplayString(maxBrakeDistance),AutopilotTargetPlanet.name)else newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Auto-Braking until eccentricity: %f begins to increase</text>]],bZ,c2,round(orbit.eccentricity,2))end elseif Autopilot and AutopilotTargetPlanetName~="None"then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],bZ,c2,AutopilotStatus)elseif FollowMode then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],bZ,c2)elseif AltitudeHold then if AutoTakeoff then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],bZ,c2,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then newContent[#newContent+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],bZ,c2+50)end else newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],bZ,c2,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then newContent[#newContent+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],bZ,c2)else newContent[#newContent+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],bZ,c2)end end;if TurnBurn then newContent[#newContent+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],bZ,c3)end;if VectorToTarget then newContent[#newContent+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],bZ,c3,VectorStatus)end;newContent[#newContent+1]="</g>"end;function DisplayOrbit(newContent)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and displayOrbit then local c5=75;local c6=0;local c7=250;local c8=4;c6=c6+c8;local c9=15;local R=c5+c7+c5/2+c8;local S=c6+c7/2+5+c8;local ca,cb,cc,cd;ca=c7/4;cd=0;newContent[#newContent+1]=[[<g class="pbright txtorb txtmid">]]newContent[#newContent+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',c7+c5*2,c7+c6,c8,c8)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cc=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ca*2)cb=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cc*(1-orbit.eccentricity)cd=ca-orbit.periapsis.altitude/cc-planet.radius/cc;local ce=""if orbit.periapsis.altitude<=0 then ce='redout'end;newContent[#newContent+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ce,c5+c7/2+cd+c8,c6+c7/2+c8,ca,cb)newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',c5+c7/2+c8,c6+c7/2+c8,planet.radius/cc)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then newContent[#newContent+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R-35,S-5,c5+c7/2+ca+cd,S-5)newContent[#newContent+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],R,S)S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.apoapsis.altitude))S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToApoapsis))S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.apoapsis.speed))end;S=c6+c7/2+5+c8;R=c5-c5/2+10+c8;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then newContent[#newContent+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R+35,S-5,c5+c7/2-ca+cd,S-5)newContent[#newContent+1]=b([[<text x="%f" y="%f">Periapsis</text>]],R,S)S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.periapsis.altitude))S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToPeriapsis))S=S+c9;newContent[#newContent+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.periapsis.speed))end;newContent[#newContent+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],c5+c7/2+c8,20+c8,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cf=orbit.timeToApoapsis/orbit.period*2*math.pi;local cg=ca*math.cos(cf)local ch=cb*math.sin(cf)newContent[#newContent+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',c5+c7/2+cg+cd+c8,c6+c7/2+ch+c8)end;newContent[#newContent+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for A,B in pairs(atlas[0])do if r==nil or B.center.x<r then r=B.center.x end;if s==nil or B.center.x>s then s=B.center.x end;if t==nil or B.center.y<t then t=B.center.y end;if u==nil or B.center.y>u then u=B.center.y end end;GalaxyMapHTML=""local ci=1.1*(s-r)/1920;local cj=1.4*(u-t)/1080;for A,B in pairs(atlas[0])do local R=960+B.center.x/ci;local S=540+B.center.y/cj;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="'..B.radius/ci*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(B.name,"Moon")and not string.match(B.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S+B.radius/ci*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..B.name.."</text>"end end;local bf=vec3(core.getConstructWorldPos())local R=960+bf.x/ci;local S=540+bf.y/cj;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=ci;MapYRatio=cj;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bf=vec3(core.getConstructWorldPos())local R=960+bf.x/ci;local S=540+bf.y/cj;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((R-80)/19.20,(S-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function ck(cl)return type(cl)=='number'end;local function cm(cl)return type(tonumber(cl))=='number'end;local function cn(co)return type(co)=='table'end;local function cp(cq)return type(cq)=='string'end;local function cr(B)return cn(B)and ck(B.x and B.y and B.z)end;local function cs(ct)return cn(ct)and ck(ct.latitude and ct.longitude and ct.altitude and ct.bodyId and ct.systemId)end;local cu=math.pi/180;local cv=180/math.pi;local epsilon=1e-10;local cw=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cx='::pos{'..cw..','..cw..','..cw..','..cw..','..cw..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cy=utils.clamp;local function cz(cA,cB)if cA==0 then return math.abs(cB)<1e-09 end;if cB==0 then return math.abs(cA)<1e-09 end;return math.abs(cA-cB)<math.max(math.abs(cA),math.abs(cB))*epsilon end;local function cC(cl)local C=string.gsub(string.reverse(b('%.4f',cl)),'^0*%.?','')return C==''and'0'or string.reverse(C)end;local function cD(cE)if cr(cE)then return b('{x=%.3f,y=%.3f,z=%.3f}',cE.x,cE.y,cE.z)end;if cn(cE)and not getmetatable(cE)then local cF={}local cG=next(cE)if type(cG)=='nil'or cG==1 then cF=cE else for A,B in pairs(cE)do local bt=cD(B)if type(A)=='number'then table.insert(cF,b('[%s]=%s',A,bt))else table.insert(cF,b('%s=%s',A,bt))end end end;return b('{%s}',table.concat(cF,','))end;if cp(cE)then return b("'%s'",cE:gsub("'",[[\']]))end;return tostring(cE)end;local cH={}cH.__index=cH;cH.__tostring=function(cE,cI)local cJ=cI or''local cK={}for A in pairs(cE)do table.insert(cK,A)end;table.sort(cK)local cF={}for _,A in ipairs(cK)do local bt=cD(cE[A])if type(A)=='number'then table.insert(cF,b('[%s]=%s',A,bt))else table.insert(cF,b('%s=%s',A,bt))end end;if cI then return b('%s%s',cI,table.concat(cF,',\n'..cI))end;return b('{%s}',table.concat(cF,','))end;cH.__eq=function(cL,cM)return cL.planetarySystemId==cM.planetarySystemId and cL.bodyId==cM.bodyId and cz(cL.radius,cM.radius)and cz(cL.center.x,cM.center.x)and cz(cL.center.y,cM.center.y)and cz(cL.center.z,cM.center.z)and cz(cL.GM,cM.GM)end;local function cN(cO,cP,cQ,cR,cS)assert(cm(cO),'Argument 1 (planetarySystemId) must be a number:'..type(cO))assert(cm(cP),'Argument 2 (bodyId) must be a number:'..type(cP))assert(cm(cQ),'Argument 3 (radius) must be a number:'..type(cQ))assert(cn(cR),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cR))assert(cm(cS),'Argument 5 (GM) must be a number:'..type(cS))return setmetatable({planetarySystemId=tonumber(cO),bodyId=tonumber(cP),radius=tonumber(cQ),center=vec3(cR),GM=tonumber(cS)},cH)end;local cT={}cT.__index=cT;cT.__tostring=function(cU)return b('::pos{%d,%d,%s,%s,%s}',cU.systemId,cU.bodyId,cC(cU.latitude*cv),cC(cU.longitude*cv),cC(cU.altitude))end;cT.__eq=function(cL,cM)return cL.bodyId==cM.bodyId and cL.systemId==cM.systemId and cz(cL.latitude,cM.latitude)and cz(cL.altitude,cM.altitude)and(cz(cL.longitude,cM.longitude)or cz(cL.latitude,math.pi/2)or cz(cL.latitude,-math.pi/2))end;local function cV(cW,cP,cX,cY,b0)local cO=cW;if cp(cW)and not cY and not b0 and not cP and not cX then cO,cP,cX,cY,b0=string.match(cW,cx)assert(cO,'Argument 1 (position string) is malformed.')else assert(cm(cO),'Argument 1 (systemId) must be a number:'..type(cO))assert(cm(cP),'Argument 2 (bodyId) must be a number:'..type(cP))assert(cm(cX),'Argument 3 (latitude) must be in degrees:'..type(cX))assert(cm(cY),'Argument 4 (longitude) must be in degrees:'..type(cY))assert(cm(b0),'Argument 5 (altitude) must be in meters:'..type(b0))end;cO=tonumber(cO)cP=tonumber(cP)cX=tonumber(cX)cY=tonumber(cY)b0=tonumber(b0)if cP==0 then return setmetatable({latitude=cX,longitude=cY,altitude=b0,bodyId=cP,systemId=cO},cT)end;return setmetatable({latitude=cu*cy(cX,-90,90),longitude=cu*(cY%360),altitude=b0,bodyId=cP,systemId=cO},cT)end;local cZ={}cZ.__index=cZ;cZ.__tostring=function(cE,cI)local cJ=cI and cI..'  'local c_={}local cK={}for A in pairs(cE)do table.insert(cK,A)end;table.sort(cK)for _,d0 in ipairs(cK)do bdy=cE[d0]local d1=cH.__tostring(bdy,cJ)if cI then table.insert(c_,b('[%s]={\n%s\n%s}',d0,d1,cI))else table.insert(c_,b('  [%s]=%s',d0,d1))end end;if cI then return b('\n%s%s%s',cI,table.concat(c_,',\n'..cI),cI)end;return b('{\n%s\n}',table.concat(c_,',\n'))end;local function d2(d3)local atlas={}local pid;for _,B in pairs(d3)do local X=B.planetarySystemId;if type(X)~='number'then error('Invalid planetary system ID: '..tostring(X))elseif pid and X~=pid then error('Mismatch planetary system IDs: '..X..' and '..pid)end;local d4=B.bodyId;if type(d4)~='number'then error('Invalid body ID: '..tostring(d4))elseif atlas[d4]then error('Duplicate body ID: '..tostring(d4))end;setmetatable(B.center,getmetatable(vec3.unit_x))atlas[d4]=setmetatable(B,cH)pid=X end;return setmetatable(atlas,cZ)end;PlanetaryReference={}local function d5(d3)return setmetatable({galaxyAtlas=d3 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(co,i)if type(i)=='number'then local system=co.galaxyAtlas[i]return d2(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(cE)return function(co,A)local d6,nv=next(co,A)return d6,nv and d2(nv)end,cE.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(cE)local d7={}for _,d8 in pairs(cE or{})do local d9=d8:getPlanetarySystemId()local da=cZ.__tostring(d8,'    ')table.insert(d7,b('  [%s]={%s\n  }',d9,da))end;return b('{\n%s\n}\n',table.concat(d7,',\n'))end;PlanetaryReference.BodyParameters=cN;PlanetaryReference.MapPosition=cV;PlanetaryReference.PlanetarySystem=d2;function PlanetaryReference.createBodyParameters(db,cP,dc,dd,de,df,dg)assert(cm(db),'Argument 1 (planetarySystemId) must be a number:'..type(db))assert(cm(cP),'Argument 2 (bodyId) must be a number:'..type(cP))assert(cm(dc),'Argument 3 (surfaceArea) must be a number:'..type(dc))assert(cn(dd),'Argument 4 (aPosition) must be an array or vec3:'..type(dd))assert(cn(de),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(de))assert(cm(df),'Argument 6 (altitude) must be in meters:'..type(df))assert(cm(dg),'Argument 7 (gravityAtPosition) must be number:'..type(dg))local cQ=math.sqrt(dc/4/math.pi)local distance=cQ+df;local dh=vec3(dd)+distance*vec3(de)local cS=dg*distance*distance;return cN(db,cP,cQ,dh,cS)end;PlanetaryReference.isMapPosition=cs;function PlanetaryReference:getPlanetarySystem(cW)local db=cW;if cs(cW)then db=cW.systemId end;if type(db)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=cZ then system=d2(system)end;return system end end end;function cZ:castIntersections(di,dj,dk,dl)local dk=dk or function(dm)return 1.05*dm.radius end;local dn={}if dl then for _,i in ipairs(dl)do dn[i]=self[i]end else dl={}for A,dm in pairs(self)do table.insert(dl,A)dn[A]=dm end end;local function dp(dq,dr)local ds=dn[dq].center-di;local dt=dn[dr].center-di;return ds:len()<dt:len()end;table.sort(dl,dp)local du=dj:normalize()for i,X in ipairs(dl)do local dm=dn[X]local dv=dm.center-di;local cQ=dk(dm)local dw=dv:dot(du)local dx=dw^2-(dv:len2()-cQ^2)if dx>=0 then local dy=math.sqrt(dx)local dz=dw+dy;local dA=dw-dy;if dA>0 then return dm,dz,dA elseif dz>0 then return dm,dz,nil end end end;return nil,nil,nil end;function cZ:closestBody(dB)assert(type(dB)=='table','Invalid coordinates.')local dC,dm;local dD=vec3(dB)for _,dE in pairs(self)do local dF=(dE.center-dD):len2()if not dm or dF<dC then dm=dE;dC=dF end end;return dm end;function cZ:convertToBodyIdAndWorldCoordinates(cW)local dG=cW;if cp(cW)then dG=cV(cW)end;if dG.bodyId==0 then return 0,vec3(dG.latitude,dG.longitude,dG.altitude)end;local dE=self:getBodyParameters(dG)if dE then return dG.bodyId,dE:convertToWorldCoordinates(dG)end end;function cZ:getBodyParameters(cW)local cP=cW;if cs(cW)then cP=cW.bodyId end;assert(cm(cP),'Argument 1 (bodyId) must be a number:'..type(cP))return self[cP]end;function cZ:getPlanetarySystemId()local A,B=next(self)return B and B.planetarySystemId end;function cH:convertToMapPosition(cR)assert(cn(cR),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cR))local dH=vec3(cR)if self.bodyId==0 then return setmetatable({latitude=dH.x,longitude=dH.y,altitude=dH.z,bodyId=0,systemId=self.planetarySystemId},cT)end;local dI=dH-self.center;local distance=dI:len()local b0=distance-self.radius;local cX=0;local cY=0;if not cz(distance,0)then local dJ=math.atan(dI.y,dI.x)cY=dJ>=0 and dJ or 2*math.pi+dJ;cX=math.pi/2-math.acos(dI.z/distance)end;return setmetatable({latitude=cX,longitude=cY,altitude=b0,bodyId=self.bodyId,systemId=self.planetarySystemId},cT)end;function cH:convertToWorldCoordinates(cW)local dG=cp(cW)and cV(cW)or cW;if dG.bodyId==0 then return vec3(dG.latitude,dG.longitude,dG.altitude)end;assert(cs(dG),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dG.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dG.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local dK=math.cos(dG.latitude)return self.center+(self.radius+dG.altitude)*vec3(dK*math.cos(dG.longitude),dK*math.sin(dG.longitude),math.sin(dG.latitude))end;function cH:getAltitude(cR)return(vec3(cR)-self.center):len()-self.radius end;function cH:getDistance(cR)return(vec3(cR)-self.center):len()end;function cH:getGravity(cR)local dL=self.center-vec3(cR)local dM=dL:len2()return self.GM/dM*dL/math.sqrt(dM)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return d5(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cp(cq)return type(cq)=='string'end;local function cn(co)return type(co)=='table'end;local function cz(cA,cB)if cA==0 then return math.abs(cB)<1e-09 end;if cB==0 then return math.abs(cA)<1e-09 end;return math.abs(cA-cB)<math.max(math.abs(cA),math.abs(cB))*epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(b0)assert(self.body)local distance=b0+self.body.radius;if not cz(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(cW,velocity)assert(self.body)assert(cn(cW)or cp(cW))assert(cn(velocity))local bf=(cp(cW)or PlanetRef.isMapPosition(cW))and self.body:convertToWorldCoordinates(cW)or vec3(cW)local B=vec3(velocity)local dN=bf-self.body.center;local dt=B:len2()local dO=dN:len()local dP=self.body.GM;local dQ=((dt-dP/dO)*dN-dN:dot(B)*B)/dP;local cA=dP/(2*dP/dO-dt)local dR=dQ:len()local du=dQ:normalize()local dS=cA*(1-dR)local dT=cA*(1+dR)local dU=dS*du+self.body.center;local dV=dR<=1 and-dT*du+self.body.center or nil;local dW=math.sqrt(cA*dP*(1-dR*dR))local dX=dV and 2*math.pi*math.sqrt(cA^3/dP)local dY=math.acos(dQ:dot(dN)/(dR*dO))if dN:dot(B)<0 then dY=-(dY-2*math.pi)end;local dZ=math.acos((math.cos(dY)+dR)/(1+dR*math.cos(dY)))local d_=dZ;if d_<0 then d_=d_+2*math.pi end;local e0=d_-dR*math.sin(d_)local e1=0;local e2=0;local e3=0;if dX~=nil then e1=e0/(2*math.pi/dX)e2=dX-e1;e3=e2+dX/2;if dY-math.pi>0 then e2=e1;e3=e2+dX/2 end;if e3>dX then e3=e3-dX end end;return{periapsis={position=dU,speed=dW/dS,circularOrbitSpeed=math.sqrt(dP/dS),altitude=dS-self.body.radius},apoapsis=dV and{position=dV,speed=dW/dT,circularOrbitSpeed=math.sqrt(dP/dT),altitude=dT-self.body.radius},currentVelocity=B,currentPosition=bf,eccentricity=dR,period=dX,eccentricAnomaly=dZ,meanAnomaly=e0,timeToPeriapsis=e2,timeToApoapsis=e3}end;local function e4(e5)local dE=PlanetRef.BodyParameters(e5.planetarySystemId,e5.bodyId,e5.radius,e5.center,e5.GM)return setmetatable({body=dE},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return e4(...)end})end;function Kinematics()local Kinematic={}local e6=30000000/3600;local e7=e6*e6;local e8=100;local function e9(B)return 1/math.sqrt(1-B*B/e7)end;function Kinematic.computeAccelerationTime(ea,eb,ec)local ed=e6*math.asin(ea/e6)return(e6*math.asin(ec/e6)-ed)/eb end;function Kinematic.computeDistanceAndTime(ea,ec,ee,ef,eg,eh)eg=eg or 0;eh=eh or 0;local ei=e9(ea)local ej=ea<=ec;local ek=ef*(ej and 1 or-1)/ee;local el=-eh/ee;local em=ek+el;if ej and em<=0 or not ej and em>=0 then return-1,-1 end;local en,eo=0,0;if ek~=0 and eg>0 then local ed=math.asin(ea/e6)local ep=math.pi*(ek/2+el)local eq=ek*eg;local er=e6*math.pi;local B=function(co)local am=(ep*co-eq*math.sin(math.pi*co/2/eg)+er*ed)/er;local es=math.tan(am)return e6*es/math.sqrt(es*es+1)end;local et=ej and function(cq)return cq>=ec end or function(cq)return cq<=ec end;eo=2*eg;if et(B(eo))then local eu=0;while math.abs(eo-eu)>0.5 do local co=(eo+eu)/2;if et(B(co))then eo=co else eu=co end end end;local ev=ea;local ew=eo/e8;for ex=1,e8 do local speed=B(ex*ew)en=en+(speed+ev)*ew/2;ev=speed end;if eo<2*eg then return en,eo end;ea=ev end;local ed=e6*math.asin(ea/e6)local ey=(e6*math.asin(ec/e6)-ed)/em;local ez=e7*math.cos(ed/e6)/em;local distance=ez-e7*math.cos((em*ey+ed)/e6)/em;return distance+en,ey+eo end;function Kinematic.computeTravelTime(ea,eb,distance)if distance==0 then return 0 end;if eb>0 then local ed=e6*math.asin(ea/e6)local ez=e7*math.cos(ed/e6)/eb;return(e6*math.acos(eb*(ez-distance)/e7)-ed)/eb end;assert(ea>0,'Acceleration and initial speed are both zero.')return distance/ea end;function Kinematic.lorentz(B)return e9(B)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()InAtmo=f()>0;function getDistanceDisplayString(distance)local eA=distance>100000;local C=""if eA then C=round(distance/1000/200,1).." SU"elseif distance<1000 then C=round(distance,1).." M"else C=round(distance/1000,1).." KM"end;return C end;function getDistanceDisplayString2(distance)local eA=distance>100000;local C=""if eA then C=round(distance/1000/200,2).." SU"elseif distance<1000 then C=round(distance,2).." M"else C=round(distance/1000,2).." KM"end;return C end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(eB)local eC=a(eB/3600)local eD=a(eB/60%60)local eB=a(eB%60)if eB<0 or eC<0 or eD<0 then return"0s"end;if eC>0 then return eC.."h "..eD.."m "..eB.."s"elseif eD>0 then return eD.."m "..eB.."s"else return eB.."s"end end;function getMagnitudeInDirection(aS,dj)aS=vec3(aS)dj=vec3(dj):normalize()local C=aS*dj;return C.x+C.y+C.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local eE=0;for A,B in pairs(atlas[0])do eE=eE+1;if eE==AutopilotTargetIndex then if B.center then AutopilotTargetName=B.name;AutopilotTargetPlanet=galaxyReference[0][A]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;system.addDataToWidget(widgetMaxMassText,widgetMaxMass)system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=B end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eF=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return eF end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local eG,eH=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local eI,eJ;if not TurnBurn then eI,eJ=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else eI,eJ=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local eK=0;local eL=0;if brakeDistance+eG<AutopilotDistance then eK=AutopilotDistance-(brakeDistance+eG)eL=Kinematic.computeTravelTime(8333.0556,0,eK)else local eM=(AutopilotDistance-brakeDistance)/eG;eG=AutopilotDistance-brakeDistance;eH=eH*eM end;if AutopilotBraking then return eJ elseif AutopilotCruising then return eL+eJ else return eH+brakeTime+eL end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local eN=Nav.axisCommandManager:getAxisCommandType(0)local be="TRAVEL"if eN==1 then be="CRUISE"end;if Autopilot then be="AUTOPILOT"end;return be end;function round(cw,eO)local eP=10^(eO or 0)return a(cw*eP+0.5)/eP end;function tablelength(eQ)local eE=0;for _ in pairs(eQ)do eE=eE+1 end;return eE end;function BeginProfile(eR)ProfileTimeStart=system.getTime()end;function EndProfile(eR)local eS=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eS;ProfileCount=ProfileCount+1;if eS>ProfileTimeMax then ProfileTimeMax=eS end;if eS<ProfileTimeMin then ProfileTimeMin=eS end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eT=ProfileTimeSum;local eU=ProfileTimeSum/ProfileCount;local eV=ProfileTimeMin;local eW=ProfileTimeMax;local eX=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eT,eU,eV,eW,eX))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local eY=unit.getAtmosphereDensity()if door and(eY>0 or eY==0 and core_altitude<10000)then for _,B in pairs(door)do B.activate()end end;if forcefield and(eY>0 or eY==0 and core_altitude<10000)then for _,B in pairs(forcefield)do B.activate()end end;if dbHud then if not wipedDatabank then for A,B in pairs(AutoVariables)do dbHud.setStringValue(B,json.encode(_G[B]))end;for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,json.encode(_G[B]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(eZ)if eZ=="oneSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local e_;e_=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local X,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if e_==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if e_~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local f0=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#f0)local f1={}for A,B in pairs(f0)do if radar_1.hasMatchingTransponder(B)==1 then f1[#f1+1]=B end end;if#f1>0 then local S=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,S)for A,B in pairs(f1)do S=S+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,S,radar_1.getConstructName(B))end end elseif radar_1 then local f2;f2=radar_1.getData():find('worksInEnvironment":false')if f2 then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;emergencyWarp=false;setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local newContent={}local be=GetFlightStyle()DrawOdometer(newContent,totalDistanceTrip,totalDistanceTravelled,be,flightTime)checkDamage(newContent)LastOdometerOutput=table.concat(newContent,"")collectgarbage("collect")elseif eZ=="reEmergencyWarp"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif eZ=="msgTick"then DisplayMessage(newContent,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif eZ=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif eZ=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif eZ=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local f3=system.getMouseDeltaX()local f4=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local f5=0.002;local f6=velMag>8334;if not f6 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then AutopilotToggle()end end;LastIsWarping=f6;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local newContent={}HUDPrologue(newContent)if showHud then updateHud(newContent)else DisplayOrbit(newContent)DrawWarnings(newContent)end;HUDEpilogue(newContent)newContent[#newContent+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(newContent,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(newContent)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(newContent)if screen_1.getMouseState()==1 then CheckButtons()end;newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+f3;simulatedY=simulatedY+f4 end;SetButtonContains()DrawButtons(newContent)if not Animating and not Animated then local f7=table.concat(newContent,"")newContent={}newContent[#newContent+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"newContent[#newContent+1]=GalaxyMapHTML;newContent[#newContent+1]=f7;newContent[#newContent+1]="</body>"Animating=true;newContent[#newContent+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(newContent,"")system.setScreen(content)elseif Animated then local f7=table.concat(newContent,"")newContent={}newContent[#newContent+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"newContent[#newContent+1]=GalaxyMapHTML;newContent[#newContent+1]=f7;newContent[#newContent+1]="</body>"end;if not Animating then newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+f3;simulatedY=simulatedY+f4;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(f4,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(f3,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(newContent)end else SetButtonContains()DrawButtons(newContent)end;newContent[#newContent+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;newContent[#newContent+1]=[[</svg></body>]]content=table.concat(newContent,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if AutoBrake and AutopilotTargetPlanetName~="None"and(vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len()<=brakeDistance then brakeInput=1;if planet.name==AutopilotTargetPlanet.name and orbit.apoapsis~=nil and orbit.eccentricity<1 then brakeInput=0;AutoBrake=false end end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local f8=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local f9=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fa=getMagnitudeInDirection(f9,AutopilotShipUp)local fb=getMagnitudeInDirection(f9,AutopilotShipRight)local fc=-fb*AutopilotDistance*velMag*f5;local fd=-fa*AutopilotDistance*velMag*f5;f8=AutopilotTargetCoords+-fc*vec3(AutopilotShipRight)+-fd*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(f8)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fe=true;local ff=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(ff)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fe=AlignToWorldVector((f8-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fe=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fe then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(newContent,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;LastApsDiff=apsDiff end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fe then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fe then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fg=0;local bf=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fh=bf-vec3(core.getConstructWorldPos())local fi=vec3(fh):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fj=vec3(fh):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(fi*fi+fj*fj)AlignToWorldVector(fh:normalize())local fk=40;local fl=distance<fk;local fm=100;if onShip then fm=300 end;local fn=utils.clamp((distance-fk)/2,10,fm)pitchInput2=0;local fe=math.abs(yawInput2)<0.1;if fe and velMag<fn and not fl then BrakeIsOn=false;fg=-10 else BrakeIsOn=true;fg=0 end;local b2=vec3(core.getConstructWorldOrientationForward())local b3=vec3(core.getConstructWorldOrientationRight())local b1=vec3(core.getWorldVertical())local ak=getPitch(b1,b2,b3)local fo=1.0;if math.abs(fg-ak)>fo then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fg-ak)local fp=pitchPID:get()pitchInput2=fp end end;local bv=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local b0=core_altitude;local fq=HoldAltitude-b0;local fr=500+velMag;local fg=(utils.smoothstep(fq,-fr,fr)-0.5)*2*MaxPitch;if not AltitudeHold then fg=0 end;local fs=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local aU=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(aU)local ft=aU:len()-aU:project_on(bv):len()local fu=(CustomTarget.position-planet.center-planet.radius):len()local M=json.decode(unit.getData()).maxBrake;local bw=velocity.x*bv.x+velocity.y*bv.y+velocity.z*bv.z;local fv=velocity:len()-math.abs(bw)local fw=vec3(core.getWorldAirFrictionAcceleration())if M~=nil then LastMaxBrake=M;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fv,0,core.getConstructMass(),0,0,M+(fw:len()-fw:project_on(bv):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fv,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if ft<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and ft>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=ft end;pitchInput2=fs;local fx=-1;if BrakeLanding then fg=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fx=vBooster.distance()elseif hover then fx=hover.distance()end;local bw=velocity.x*bv.x+velocity.y*bv.y+velocity.z*bv.z;if fx>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bv)<0.99 then BrakeIsOn=true elseif bw<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fg<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local b2=vec3(core.getConstructWorldOrientationForward())local b3=vec3(core.getConstructWorldOrientationRight())local b1=vec3(core.getWorldVertical())local ak=getPitch(b1,b2,b3)local fo=0.1;if math.abs(fg-ak)>fo then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fg-ak)local fp=pitchPID:get()pitchInput2=pitchInput2+fp end end;LastEccentricity=orbit.eccentricity;if antigrav and core_altitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fy=core_altitude-antigrav.getBaseAltitude()if core_altitude>800 and fy<-200 then desiredBaseAltitude=math.max(core_altitude+100,1000)elseif fy>200 then desiredBaseAltitude=core_altitude-100 end else local fy=AntigravTargetAltitude-core_altitude;local velocity=vec3(core.getWorldVelocity())local bv=vec3(core.getWorldVertical())*-1;local bw=velocity.x*bv.x+velocity.y*bv.y+velocity.z*bv.z;local bw=velocity.x*bv.x+velocity.y*bv.y+velocity.z*bv.z;local fz=290;local fA=-290;if unit.getClosestPlanetInfluence()>0.3 then fA=-190 end;fA=math.min(math.max(fA,-math.abs(fy)/20.0),-10)fz=math.max(math.min(fz,math.abs(fy)/20.0),10)if bw<fA then desiredBaseAltitude=core_altitude+100 elseif bw>fz then desiredBaseAltitude=math.max(core_altitude-100,1000)elseif math.abs(fy)>150 or math.abs(bw)>15 then if math.abs(bw)>10 then desiredBaseAltitude=core_altitude+math.max(math.min(fy-bw/10.0,100),-100)else desiredBaseAltitude=core_altitude+math.max(math.min(fy,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bw)<10 and math.abs(fy)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fB=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fB=math.max(fB,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fC=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local fD=rollInput+rollInput2+system.getControlDeviceYawInput()local fE=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local fF=brakeInput;local fG=vec3(core.getWorldVertical())local fH=vec3(core.getConstructWorldOrientationUp())local fI=vec3(core.getConstructWorldOrientationForward())local fJ=vec3(core.getConstructWorldOrientationRight())local fK=vec3(core.getWorldVelocity())local fL=vec3(core.getWorldVelocity()):normalize()local fM=getRoll(fG,fI,fJ)local fN=math.abs(fM)local fO=utils.sign(fM)local fP=vec3(core.getWorldAngularVelocity())local fQ=fC*pitchSpeedFactor*fJ+fD*rollSpeedFactor*fI+fE*yawSpeedFactor*fH;if fG:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local fR=1.0;if autoRoll==true and fN>fR and fD==0 then local fS=utils.clamp(0,fN-30,fN+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(fS-fM)local fT=rollPID:get()fQ=fQ+fT*fI end;local fU=20.0;if turnAssist==true and fN>fU and fC==0 and fE==0 then local fV=turnAssistFactor*0.1;local fW=turnAssistFactor*0.025;local fX=(fN-fU)/(180-fU)*180;local fY=0;if fX<90 then fY=fX/90 elseif fX<180 then fY=(180-fX)/90 end;fY=fY*fY;local fZ=-fO*fW*(1.0-fY)local f_=fV*fY;fQ=fQ+f_*fJ+fZ*fH end end;local g0=1;local g1=0;local g2=1;local g3=fB*(fQ-fP)local g4=vec3(core.getWorldAirFrictionAngularAcceleration())g3=g3-g4;Nav:setEngineTorqueCommand('torque',g3,g0,'airfoil','','',g2)local g5=-fF*(brakeSpeedFactor*fK+brakeFlatFactor*fL)Nav:setEngineForceCommand('brake',g5)local g6=''local g7=vec3()local g8=false;local g9='thrust analog longitudinal'local ga=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ga==axisCommandType.byThrottle then local gb=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g9,axisCommandId.longitudinal)Nav:setEngineForceCommand(g9,gb,g0)elseif ga==axisCommandType.byTargetSpeed then local gb=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)g6=g6 ..' , '..g9;g7=g7+gb;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then g8=true end end;local gc='thrust analog lateral'local gd=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gd==axisCommandType.byThrottle then local ge=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gc,axisCommandId.lateral)Nav:setEngineForceCommand(gc,ge,g0)elseif gd==axisCommandType.byTargetSpeed then local gf=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)g6=g6 ..' , '..gc;g7=g7+gf end;local gg='thrust analog vertical'local gh=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gh==axisCommandType.byThrottle then local gi=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gg,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gg,gi,g0,'airfoil','ground','',g2)else Nav:setEngineForceCommand(gg,vec3(),g0)end elseif gh==axisCommandType.byTargetSpeed then local gj=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)g6=g6 ..' , '..gg;g7=g7+gj end;if g7:len()>constants.epsilon then if brakeInput~=0 or g8 or math.abs(fL:dot(fI))<0.95 then g6=g6 ..', brake'end;Nav:setEngineForceCommand(g6,g7,g1,'','','',g2)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,C=coroutine.resume(beginSetup)if C then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gk)if gk=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif ReentryMode and unit.getAtmosphereDensity()<=0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude then Reentry=true;gearExtended=false;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gk=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gk=="forward"then pitchInput=pitchInput-1 elseif gk=="backward"then pitchInput=pitchInput+1 elseif gk=="left"then rollInput=rollInput-1 elseif gk=="right"then rollInput=rollInput+1 elseif gk=="yawright"then yawInput=yawInput-1 elseif gk=="yawleft"then yawInput=yawInput+1 elseif gk=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gk=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gk=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gk=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gk=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gk=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gk=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif gk=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif gk=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif gk=="option4"then AutopilotToggle()toggleView=false elseif gk=="option5"then ToggleTurnBurn()toggleView=false elseif gk=="option6"then ToggleAltitudeHold()toggleView=false elseif gk=="option7"then wipeSaveVariables()toggleView=false elseif gk=="option8"then toggleFollowMode()toggleView=false elseif gk=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif gk=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gk=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gk=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gk=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gk=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gk=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gk=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gk=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gk=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gk)if gk=="forward"then pitchInput=pitchInput+1 elseif gk=="backward"then pitchInput=pitchInput-1 elseif gk=="left"then rollInput=rollInput+1 elseif gk=="right"then rollInput=rollInput-1 elseif gk=="yawright"then yawInput=yawInput+1 elseif gk=="yawleft"then yawInput=yawInput-1 elseif gk=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gk=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gk=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gk=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gk=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gk=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gk=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gk=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gk=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gk)if gk=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gk=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gk=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gk=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;toggleView=true;function DisplayMessage(newContent,gl)if gl~="empty"then newContent[#newContent+1]=[[<text class="msg" x="50%%" y="310" >]]for gm in string.gmatch(gl,"([^\n]+)")do newContent[#newContent+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gm)end;newContent[#newContent+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local H=system.getTime()local velocity=vec3(core.getWorldVelocity())local bc=vec3(velocity):len()local gn=H-lastTravelTime;if bc>1.38889 then bc=bc/1000;local go=bc*(H-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+go;totalDistanceTrip=totalDistanceTrip+go end;flightTime=flightTime+gn;totalFlightTime=totalFlightTime+gn;lastTravelTime=H end;function updateMass()local gp=0;for A in pairs(elementsID)do gp=gp+core.getElementMassById(elementsID[A])end;return gp end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
